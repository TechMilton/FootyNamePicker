{"version":3,"sources":["store/initialState.js","store/reducer.js","App.js","index.js"],"names":["initialState","names","color","teamOne","teamTwo","count","state","action","type","value","name","input","colorInput","addName","index","filter","_","i","removeName","addTeamOne","addTeamTwo","teamOneNames","teamTwoNames","length","push","shuffleTeam","addCount","AppContext","React","createContext","App","useReducer","reducer","dispatch","Provider","console","log","ReactDOM","render","document","getElementById"],"mappings":"8QAQeA,EARM,CACjBC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,MAAO,GC8DI,WAACC,EAAOC,GACnB,OAAQA,EAAOC,MACX,IAAK,WAAY,OAlEF,SAACF,EAAD,GAAuB,IAAbG,EAAY,EAAZA,MAC7B,OAAO,2BACAH,GADP,IAEIL,MAAM,GAAD,mBAAMK,EAAML,OAAZ,CAAmB,CACpBS,KAAMD,EAAME,MACZT,MAAOO,EAAMG,gBA6DOC,CAAQP,EAAOC,GACvC,IAAK,cAAe,OAXF,SAACD,EAAD,GAAuB,IAAbQ,EAAY,EAAZA,MAChC,OAAO,2BACAR,GADP,IAEIL,MAAOK,EAAML,MAAMc,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMH,OAQfI,CAAWZ,EAAOC,GAC7C,IAAK,WAAY,OAzDC,SAACD,EAAD,GAAuB,IAAbG,EAAY,EAAZA,MAChC,OAAO,2BACAH,GADP,IAEIH,QAASM,EAAMN,UAsDSgB,CAAWb,EAAOC,GAC1C,IAAK,WAAY,OAlDC,SAACD,EAAD,GAAuB,IAAbG,EAAY,EAAZA,MAChC,OAAO,2BACAH,GADP,IAEIF,QAASK,EAAML,UA+CSgB,CAAWd,EAAOC,GAC1C,IAAK,UAAW,OApCG,SAACD,GAOxB,IANA,IAAML,EAAQK,EAAML,MACdoB,EAAe,GACfC,EAAe,GAIZL,EAAI,EAAGA,EAAIhB,EAAMsB,OAAQN,IAC1BA,EAAI,IAAM,EACVI,EAAaG,KAAKvB,EAAMgB,IAExBK,EAAaE,KAAKvB,EAAMgB,IAGhC,OAAO,2BACAX,GADP,IAEIe,aAAcA,EACdC,aAAcA,IAmBSG,CAAYnB,GACnC,IAAK,QAAS,OA5CE,SAACA,EAAD,GAAuB,IAAbG,EAAY,EAAZA,MAC9B,OAAO,2BACAH,GADP,IAEID,MAAOI,EAAMJ,QAyCQqB,CAASpB,EAAOC,GACrC,IAAK,QAAS,OAAOP,EACrB,QAAS,OAAOM,ICxDXqB,EAAaC,IAAMC,cAAc,IAc/BC,EAZH,WAAO,IAAD,EAEQC,qBAAWC,EAAShC,GAF5B,mBAGZS,EAAQ,CAAEH,MAHE,KAGK2B,SAHL,MAKhB,OACE,kBAACN,EAAWO,SAAZ,CAAqBzB,MAAOA,GAC1B,4CCvBN0B,QAAQC,IAAI,uBACZC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEAC,SAASC,eAAe,W","file":"static/js/main.cab40a20.chunk.js","sourcesContent":["const initialState = {\r\n    names: [],\r\n    color: \"\",\r\n    teamOne: \"\",\r\n    teamTwo: \"\",\r\n    count: 4,\r\n};\r\n\r\nexport default initialState;","import initialState from \"./initialState\";\r\n\r\n//Add name to list\r\nexport const addName = (state, { value }) => {\r\n    return {\r\n        ...state,\r\n        names: [...state.names, {\r\n            name: value.input,\r\n            color: value.colorInput,\r\n        }],\r\n    };\r\n};\r\n\r\n//Add Team One Name -- Settings Page\r\nexport const addTeamOne = (state, { value }) => {\r\n    return {\r\n        ...state,\r\n        teamOne: value.teamOne,\r\n    };\r\n}\r\n\r\n//Add Team Two Name - Settings Page\r\nexport const addTeamTwo = (state, { value }) => {\r\n    return {\r\n        ...state,\r\n        teamTwo: value.teamTwo,\r\n    };\r\n}\r\n\r\n//Add player counter - Settings Page\r\nexport const addCount = (state, { value }) => {\r\n    return {\r\n        ...state,\r\n        count: value.count,\r\n    };\r\n}\r\n\r\nexport const shuffleTeam = (state) => {\r\n    const names = state.names;\r\n    const teamOneNames = [];\r\n    const teamTwoNames = [];\r\n\r\n    //Loops over each name and splits them into two lists depending if they are divisible by 2\r\n\r\n    for (let i = 0; i < names.length; i++) {\r\n        if (i % 2 === 0) {\r\n            teamOneNames.push(names[i]);\r\n        } else {\r\n            teamTwoNames.push(names[i]);\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        teamOneNames: teamOneNames,\r\n        teamTwoNames: teamTwoNames,\r\n    };\r\n}\r\n\r\n//Remove name from list\r\nexport const removeName = (state, { index }) => {\r\n    return {\r\n        ...state,\r\n        names: state.names.filter((_, i) => i !== index),\r\n    };\r\n};\r\n\r\n//export default data\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_NAME\": return addName(state, action);\r\n        case \"REMOVE_NAME\": return removeName(state, action);\r\n        case \"TEAM_ONE\": return addTeamOne(state, action);\r\n        case \"TEAM_TWO\": return addTeamTwo(state, action);\r\n        case \"SHUFFLE\": return shuffleTeam(state);\r\n        case \"COUNT\": return addCount(state, action);\r\n        case \"RESET\": return initialState;\r\n        default: return state;\r\n    };\r\n}\r\n\r\n\r\n","import React, { useReducer } from 'react';\n\n// import the ReactRouter components\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport HomeView from './views/HomeView/HomeView';\nimport SettingsView from './views/SettingsView/SettingsView';\nimport TeamsView from './views/TeamsView/TeamsView';\nimport reducer from './store/reducer';\nimport initialState from './store/initialState';\n\nimport { appUrls } from './urls';\n\n// Creating a context through which we will be able to access global state\nexport const AppContext = React.createContext({});\n\nconst App = () => {\n\n  let [state, dispatch] = useReducer(reducer, initialState);\n  let value = { state, dispatch };\n\n  return (\n    <AppContext.Provider value={value}>\n      <p>Hello World</p>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { HashRouter as Router } from 'react-router-dom';\n\nconsole.log('index.js is running')\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n"],"sourceRoot":""}